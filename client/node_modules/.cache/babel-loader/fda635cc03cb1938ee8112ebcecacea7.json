{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, checkUserSession } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/rgala98/Desktop/reactTutorial/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","signInFailure","signInSuccess","checkUserSession","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAwBC,GAAxB,EAA4BC,IAA5B,QAAuC,oBAAvC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAAQC,cAAR,EAAwBC,IAAxB,EAA6BC,yBAA7B,QAA8D,+BAA9D;AAEA,SAAUC,aAAV,EAAyBC,aAAzB,EAAwCC,gBAAxC,QAA+D,gBAA/D;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAE9C,MAAG;AACC,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AAEA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AACpBO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AACC,SAAGF,YAAY,CAACG,IAAb;AADJ,KAAD,CAAd,CAAT;AAGH,GAPD,CAQA,OAAMC,KAAN,EAAY;AACR,UAAMjB,GAAG,CAACO,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AAEJ;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMd,IAAI,CAACe,eAAL,CAAqBhB,cAArB,CAArB;AAEA,UAAMM,uBAAuB,CAACS,IAAD,CAA7B;AAEH,GALD,CAKC,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACO,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,mBAAV,GAA+B,CAErC;AAED,OAAO,UAAUC,mBAAV,GAA+B;AAElC,QAAMvB,UAAU,CAACI,eAAe,CAACoB,oBAAjB,EAAuCL,gBAAvC,CAAhB;AAEH;AAED,OAAO,UAAUM,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAV,CAA1B,EAAsD;AACzD,MAAG;AACC,UAAM;AAACR,MAAAA;AAAD,QAAS,MAAMd,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAArB;AACA,UAAMjB,uBAAuB,CAACS,IAAD,CAA7B;AAGH,GALD,CAKC,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACO,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAGD,OAAO,UAAUY,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAAEI,eAAe,CAAC2B,mBAAlB,EAAuCN,eAAvC,CAAhB;AACH;AAED,OAAO,UAAUO,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCX,mBAArC,CAAhB;AACH;AAGD,OAAO,UAAUY,SAAV,GAAqB;AACxB,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAACoB,mBAAD,CADE,EAENpB,IAAI,CAAC2B,kBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {takeLatest, put,all,call} from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport {googleProvider, auth,createUserProfileDocument } from '../../firebase/firebase.utils';\n\nimport  { signInFailure, signInSuccess, checkUserSession} from './user.actions';\n\n\nexport function* getSnapshotFromUserAuth(userAuth){\n\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth);\n\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({\n            id: userSnapshot.id, ...userSnapshot.data()\n        }));\n    }\n    catch(error){\n        yield put(signInFailure(error));\n    }\n\n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider);\n\n        yield getSnapshotFromUserAuth(user);\n\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated(){\n    \n}\n\nexport function* onGoogleSignInStart(){\n\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n\n}\n\nexport function* signInWithEmail({payload: {email,password}}){\n    try{\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user);\n\n\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\n\nexport function* onEmailSignInStart(){\n    yield takeLatest (UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n\nexport function* userSagas(){\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}