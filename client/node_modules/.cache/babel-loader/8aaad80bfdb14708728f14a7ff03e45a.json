{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  const {\n    email1,\n    password1\n  } = email;\n  console.log(\"EMAIL IS \" + email1);\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/rgala98/Desktop/reactTutorial/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutFailure","signOutSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","email1","password1","console","log","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put,all,call} from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport {googleProvider, auth,createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n\nimport  { signInFailure, signInSuccess, signOutFailure,signOutSuccess} from './user.actions';\n\n\nexport function* getSnapshotFromUserAuth(userAuth){\n\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth);\n\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({\n            id: userSnapshot.id, ...userSnapshot.data()\n        }));\n    }\n    catch(error){\n        yield put(signInFailure(error));\n    }\n\n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider);\n\n        yield getSnapshotFromUserAuth(user);\n\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithEmail({payload: {email,password}}){\n\n    const {email1,password1} = email;\n\n    console.log(\"EMAIL IS \" + email1);\n    try{\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user);\n\n\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth = yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signOut(){\n    try{\n        yield auth.signOut();\n        yield put(signOutSuccess());\n\n    }catch(error){\n        yield put(signOutFailure(error))\n    }\n}\n\nexport function* onGoogleSignInStart(){\n\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest (UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOut);\n}\n\n\nexport function* userSagas(){\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(isUserAuthenticated),\n        call(onSignOutStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}